{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ancestorNodes","keys","BemItem","obj","Object","assign","this","other","block","element","modifier","value","getUnmodifiedItem","unknown","className","partsRegex","match","parts","groups","plainParts","forEach","key","node","nextAncestor","parentNode","tagName","App","htmlInputRef","React","useRef","ref","onClick","html","current","nodesWithClasses","DOMParser","parseFromString","querySelectorAll","console","log","nodes","bemList","Array","from","classList","map","fromClassName","bemItem","error","toString","lintForInvalidBemNames","bemItemWithoutModifier","some","potentialBaseBemItem","isEqual","lintForModifierWithoutBase","childNode","childBemList","childBemItem","foundBlockAncestor","ancestor","parentBemItem","getBlock","lintForElementsOutsideBlocks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbb435eb.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport project1Classes from \"./project1-classes.json\";\nimport project2Classes from \"./project2-classes.json\";\n\nconst keys = [\"unknown\", \"block\", \"element\", \"modifier\", \"value\"];\n\n/**\n * Abstracts the 4 parts of a BEM classname for comparison and convenient modificationn\n */\nclass BemItem {\n  constructor(obj) {\n    Object.assign(this, obj);\n  }\n  isEqual(other) {\n    return (\n      this.block === other.block &&\n      this.element === other.element &&\n      this.modifier === other.modifier &&\n      this.value === other.value\n    );\n  }\n  getUnmodifiedItem() {\n    return Object.assign(new BemItem(), this, { modifier: \"\", value: \"\" });\n  }\n  getBlock() {\n    return Object.assign(new BemItem(), this.getUnmodifiedItem(), {\n      element: \"\",\n    });\n  }\n  toString() {\n    if (this.unknown) {\n      return this.unknown;\n    } else {\n      return this.block + this.element + this.modifier + this.value;\n    }\n  }\n  static fromClassName(className) {\n    const partsRegex =\n      /^(?<block>[a-zA-Z0-9\\\\-]+)(?<element>__[a-zA-Z0-9\\\\-]*)?(?<modifier>_[a-zA-Z0-9\\\\-]*)?(?<value>_[a-zA-Z0-9\\\\-]*)?$/;\n    const match = className.match(partsRegex);\n    if (match === null) {\n      return new BemItem({\n        block: \"\",\n        element: \"\",\n        modifier: \"\",\n        value: \"\",\n        unknown: className,\n      });\n    }\n    const parts = match.groups;\n    const plainParts = Object.assign(new BemItem(), parts); // Make it serializable\n    keys.forEach((key) => {\n      plainParts[key] = plainParts[key] || \"\";\n    });\n    return plainParts;\n  }\n}\n\nfunction lintForInvalidBemNames(nodes) {\n  for (let node of nodes) {\n    const bemList = Array.from(node.classList).map(BemItem.fromClassName);\n    for (let bemItem of bemList) {\n      if (bemItem.unknown) {\n        console.error(`Class is not a valid BEM name: ${bemItem.toString()}`);\n      }\n    }\n  }\n}\n\n/**\n * Prints errors for any BEM class modifiers used in the HTML without the unmodified BEM name in the same classList\n * @param {*} nodes\n */\nfunction lintForModifierWithoutBase(nodes) {\n  for (let node of nodes) {\n    const bemList = Array.from(node.classList).map(BemItem.fromClassName);\n    for (let bemItem of bemList) {\n      if (bemItem.modifier) {\n        const bemItemWithoutModifier = bemItem.getUnmodifiedItem();\n        if (\n          !bemList.some((potentialBaseBemItem) => {\n            return bemItemWithoutModifier.isEqual(potentialBaseBemItem);\n          })\n        ) {\n          console.error(\n            `BEM modifier ${bemItem.toString()} has no accompanying base class`\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Iterates up from a node through its ancestors, stopping at #document\n * @param {HTMLElement} node - The node to start searching from (not included in the results)\n */\nfunction* ancestorNodes(node) {\n  let nextAncestor = node.parentNode;\n  while (true) {\n    if (!nextAncestor.tagName) {\n      // quick and dirty way to stop at #document\n      break;\n    }\n    yield nextAncestor;\n    nextAncestor = nextAncestor.parentNode;\n  }\n}\n\nfunction lintForElementsOutsideBlocks(nodes) {\n  for (let childNode of nodes) {\n    const childBemList = Array.from(childNode.classList).map(\n      BemItem.fromClassName\n    );\n    for (let childBemItem of childBemList) {\n      if (childBemItem.element) {\n        // find parent htmlelements that are its corresponding block\n        let foundBlockAncestor = false;\n        for (let ancestor of ancestorNodes(childNode)) {\n          const parentBemList = Array.from(ancestor.classList).map(\n            BemItem.fromClassName\n          );\n          if (\n            parentBemList.some((parentBemItem) => {\n              return parentBemItem.isEqual(childBemItem.getBlock());\n            })\n          ) {\n            foundBlockAncestor = true;\n            break;\n          }\n        }\n        if (!foundBlockAncestor) {\n          console.error(\n            `BEM Element found outside of its block: ${childBemItem.toString()}`\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction compareProjectClassLists(inputClasses, projectClasses) {\n  for (let inputClass of new Set(inputClasses)) {\n    // use a set to avoid duplicate errors\n    if (!projectClasses.includes(inputClass)) {\n      console.error(\n        `Class found in input code is not a class used in this project: ${inputClass}`\n      );\n    }\n  }\n  for (let projectClass of projectClasses) {\n    if (!inputClasses.includes(projectClass)) {\n      console.error(\n        `Class from project brief is not used in the input code: ${projectClass}`\n      );\n    }\n  }\n}\n\nfunction App() {\n  const htmlInputRef = React.useRef();\n  function handleClickLint() {\n    const html = htmlInputRef.current.value;\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(html, \"text/html\");\n    const nodesWithClasses = htmlDoc.querySelectorAll(\"[class]\");\n    console.log(\n      \"%c Linting for BEM rule violations...\",\n      \"color: green; font-weight: bold\"\n    );\n    lintForInvalidBemNames(nodesWithClasses);\n    lintForModifierWithoutBase(nodesWithClasses);\n    lintForElementsOutsideBlocks(nodesWithClasses);\n  }\n  function handleCheckProjectClick(projectClasses) {\n    const html = htmlInputRef.current.value;\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(html, \"text/html\");\n    const nodesWithClasses = htmlDoc.querySelectorAll(\"[class]\");\n    const classes = Array.from(nodesWithClasses).reduce((list, node) => {\n      return list.concat(Array.from(node.classList));\n    }, []);\n    console.log(\n      \"%c Checking classlist against project...\",\n      \"color: green; font-weight: bold\"\n    );\n    compareProjectClassLists(classes, projectClasses);\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <div>Paste your html here:</div>\n        <textarea ref={htmlInputRef}></textarea>\n      </div>\n      <div>\n        <button onClick={handleClickLint}>Lint!</button>\n      </div>\n      {/*\n      <br />\n      <div>If relevant: Check your class list against...</div>{\" \"}\n      <div>\n        <button onClick={() => handleCheckProjectClick(project1Classes)}>\n          Project 1\n        </button>\n        <button onClick={() => handleCheckProjectClick(project2Classes)}>\n          Project 2\n        </button>\n      </div>\n      */}\n      <br />\n      <div>\n        Because this is a <i>very</i> minimal viable product, the results will\n        be printed as errors in the console. Open up those dev tools!\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}